<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd" >
<mapper namespace="com.fx.payment.dao.ITradeDetailDao" >
  <resultMap id="BaseResultMap" type="com.fx.payment.model.TradeDetail" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="uid" property="uid" jdbcType="INTEGER" />
    <result column="payer_id" property="payerId" jdbcType="INTEGER" />
    <result column="bank_name" property="bankName" jdbcType="VARCHAR" />
    <result column="payer_type" property="payerType" jdbcType="TINYINT" />
    <result column="oper_type" property="operType" jdbcType="TINYINT" />
    <result column="oper_money" property="operMoney" jdbcType="NUMERIC" />
    <result column="currency" property="currency" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="create_user" property="createUser" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="CHAR" />
    <result column="create_ip" property="createIp" jdbcType="VARCHAR" />
    <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="CHAR" />
    <result column="update_ip" property="updateIp" jdbcType="VARCHAR" />
    <result column="is_del" property="isDel" jdbcType="TINYINT" />
    <result column="branchName" property="branchName" jdbcType="VARCHAR" />
    <result column="swiftCode" property="swiftCode" jdbcType="VARCHAR" />
    <result column="bakName" property="bakName" jdbcType="VARCHAR" />
    <result column="cardNumber" property="cardNumber" jdbcType="VARCHAR" />
    <result column="mt4Account" property="mt4Account" jdbcType="INTEGER" />
    <result column="rate" property="rate" jdbcType="NUMERIC" />
    <result column="refuseReason" property="refuseReason" jdbcType="VARCHAR" />
    <result column="actualMoney" property="actualMoney" jdbcType="NUMERIC" />
    <result column="fee" property="fee" jdbcType="NUMERIC" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="edoc_ids" property="edocIds" jdbcType="VARCHAR" />
    <result column="deposit_money" property="depositMoney" jdbcType="NUMERIC" />
    <result column="order_number" property="orderNumber" jdbcType="VARCHAR" />
    <result column="mer_order_num" property="merOrderNum" jdbcType="VARCHAR" />
    <result column="comment" property="comment" jdbcType="VARCHAR" />
      <result column="actualFee" property="actualFee" jdbcType="NUMERIC"/>
      <result column="realMoney" property="realMoney" jdbcType="NUMERIC"/>
  </resultMap>
  <sql id="Base_Column_List" >
    id, uid, payer_id, bank_name, payer_type, oper_type, oper_money, currency,
    status, create_user, create_time, create_ip, update_user, update_time, update_ip, 
    is_del,branchName,swiftCode,bakName,cardNumber,mt4Account,rate,refuseReason,actualMoney,fee,remark,edoc_ids,deposit_money,order_number,mer_order_num,comment, actualFee, realMoney
  </sql>
  <sql id="Base_Column_Listother" >
    d.id, d.uid, d.payer_id, d.bank_name, d.payer_type, d.oper_type, d.oper_money, d.currency,
    d.status, d.create_user, d.create_time, d.create_ip, d.update_user, d.update_time, d.update_ip,
    d.is_del,d.branchName,d.swiftCode,d.bakName,d.cardNumber,d.mt4Account,d.rate,d.refuseReason,d.actualMoney,d.fee,d.remark,d.edoc_ids,d.deposit_money,d.order_number,d.mer_order_num,d.comment,d.actualFee, d.realMoney
  </sql>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from tb_trade_detail
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.fx.payment.model.TradeDetail" useGeneratedKeys="true" keyProperty="id" >
    insert into tb_trade_detail (uid, payer_id, bank_name,
      payer_type, oper_type, oper_money, currency,
      status, create_user, 
      create_time, create_ip, update_user, 
      update_time, update_ip, is_del,branchName,swiftCode,bakName,cardNumber,mt4Account,rate,refuseReason,actualMoney,fee,remark,edoc_ids,deposit_money,order_number,mer_order_num,comment, actualFee, realMoney
      )
    values (#{uid,jdbcType=INTEGER}, #{payerId,jdbcType=INTEGER}, #{bankName,jdbcType=VARCHAR}, 
      #{payerType,jdbcType=TINYINT}, #{operType,jdbcType=TINYINT}, #{operMoney,jdbcType=NUMERIC}, #{currency, jdbcType=VARCHAR},
      #{status,jdbcType=TINYINT}, #{createUser,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=CHAR}, #{createIp,jdbcType=VARCHAR}, #{updateUser,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=CHAR}, #{updateIp,jdbcType=VARCHAR}, #{isDel,jdbcType=TINYINT}, #{branchName,jdbcType=VARCHAR}, #{swiftCode,jdbcType=VARCHAR}, #{bakName,jdbcType=VARCHAR}
      , #{cardNumber,jdbcType=VARCHAR}, #{mt4Account,jdbcType=INTEGER},#{rate,jdbcType=NUMERIC}, #{refuseReason,jdbcType=VARCHAR}, #{actualMoney,jdbcType=NUMERIC}, #{fee,jdbcType=NUMERIC}
      , #{remark,jdbcType=VARCHAR}, #{edocIds,jdbcType=VARCHAR},#{depositMoney,jdbcType=NUMERIC}, #{orderNumber,jdbcType=VARCHAR}, #{merOrderNum,jdbcType=VARCHAR}, #{comment,jdbcType=VARCHAR},
      #{actualFee,jdbcType=NUMERIC},#{realMoney,jdbcType=NUMERIC}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.fx.payment.model.TradeDetail" >
    update tb_trade_detail
    set uid = #{uid,jdbcType=INTEGER},
      payer_id = #{payerId,jdbcType=INTEGER},
      bank_name = #{bankName,jdbcType=VARCHAR},
      payer_type = #{payerType,jdbcType=TINYINT},
      oper_type = #{operType,jdbcType=TINYINT},
      oper_money = #{operMoney,jdbcType=NUMERIC},
      currency = #{currency,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      create_user = #{createUser,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=CHAR},
      create_ip = #{createIp,jdbcType=VARCHAR},
      update_user = #{updateUser,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=CHAR},
      update_ip = #{updateIp,jdbcType=VARCHAR},
      is_del = #{isDel,jdbcType=TINYINT},
      branchName = #{branchName,jdbcType=VARCHAR},
      swiftCode = #{swiftCode,jdbcType=VARCHAR},
      bakName = #{bakName,jdbcType=VARCHAR},
      cardNumber = #{cardNumber,jdbcType=VARCHAR},
      mt4Account = #{mt4Account,jdbcType=INTEGER},
      rate = #{rate,jdbcType=NUMERIC},
      refuseReason = #{refuseReason,jdbcType=VARCHAR},
      actualMoney = #{actualMoney,jdbcType=NUMERIC},
      fee = #{fee,jdbcType=NUMERIC},
      remark = #{remark,jdbcType=VARCHAR},
      edoc_ids = #{edocIds,jdbcType=VARCHAR},
      deposit_money = #{depositMoney,jdbcType=NUMERIC},
      order_number = #{orderNumber,jdbcType=VARCHAR},
      mer_order_num = #{merOrderNum,jdbcType=VARCHAR},
      comment =  #{comment,jdbcType=VARCHAR},
      actualFee = #{actualFee, jdbcType=NUMERIC},
      realMoney = #{realMoney, jdbcType=NUMERIC}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from tb_trade_detail
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from tb_trade_detail
  </select>
  
  <select id="pageQueryCount" resultType="java.lang.Integer" parameterType="java.util.Map" >
    select
    count(1)
    from tb_trade_detail
    where is_del = 0 
    <if test="uid != null">
        and uid = #{uid, jdbcType=INTEGER}
    </if>
    <if test="status != null">
        and status = #{status, jdbcType=TINYINT}
    </if>
    <if test="operType != null">
        and oper_type = #{operType, jdbcType=TINYINT}
    </if>
    <if test="payerType != null">
        and payer_type = #{payerType, jdbcType=INTEGER}
    </if>
  </select>
  
  <select id="pageQueryList" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select top ${limit}
    <include refid="Base_Column_List" />
    from tb_trade_detail
    where is_del = 0 
    <if test="uid != null">
	        and uid = #{uid, jdbcType=INTEGER}
	    </if>
    <if test="status != null">
        and status = #{status, jdbcType=TINYINT}
    </if>
     <if test="operType != null">
        and oper_type = #{operType, jdbcType=INTEGER}
    </if>
    <if test="payerType != null">
        and payer_type = #{payerType, jdbcType=INTEGER}
    </if>
    <if test="offset gt 0">
	and (
    	  (SELECT MIN(id) FROM (SELECT TOP ${offset} id	FROM tb_trade_detail where is_del = 0 
	    <if test="uid != null">
	        and uid = #{uid, jdbcType=INTEGER}
	    </if>
	    <if test="status != null">
	        and status = #{status, jdbcType=TINYINT}
	    </if>
	     <if test="operType != null">
	        and oper_type = #{operType, jdbcType=INTEGER}
	    </if>
	    <if test="payerType != null">
	        and payer_type = #{payerType, jdbcType=INTEGER}
	    </if>
        ORDER BY id desc) AS T) > id
		)
    </if>
	order by id desc
  </select>

  <select id="selectDetailByType" resultMap="BaseResultMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from tb_trade_detail
    where is_del = 0
    <if test="uid != null">
      and uid = #{uid, jdbcType=INTEGER}
    </if>
    <if test="status != null">
      and status = #{status, jdbcType=TINYINT}
    </if>
    <if test="operType != null">
      and oper_type = #{operType, jdbcType=INTEGER}
    </if>
    <if test="payerType != null">
      and payer_type = #{payerType, jdbcType=INTEGER}
    </if>
    <if test="payerTypeList != null">
      and payer_type in
      <foreach item="payerType" index="index" collection="payerTypeList" open="(" separator="," close=")">
        #{payerType}
      </foreach>
    </if>
    <if test="beginDate != null">
      <![CDATA[ and update_time >= #{beginDate, jdbcType=VARCHAR} ]]>
    </if>
    <if test="endDate != null">
      <![CDATA[ and update_time <= #{endDate, jdbcType=VARCHAR} ]]>
    </if>
    order by update_time desc
  </select>

  <select id="selectDetail" resultMap="BaseResultMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_Listother" />
    from tb_trade_detail d, tb_user_register r
    where d.uid = r.id
    and d.oper_type = #{operType, jdbcType=INTEGER}
    and d.payer_type = #{payerType, jdbcType=INTEGER}
    <if test="statusq != -1">
      and d.status = #{statusq, jdbcType=TINYINT}
    </if>
    <if test="userq != null and userq !='' ">
      and (r.email like #{userq, jdbcType=VARCHAR} or r.enName like #{userq, jdbcType=VARCHAR} or d.mt4Account like #{userq, jdbcType=VARCHAR})
    </if>
    order by update_time desc
  </select>
  <select id="selectDetailBySuccess" resultType="java.lang.Integer" parameterType="java.lang.String">
    select count(*)
    from tb_trade_detail
    where mt4Account = #{mt4Account,jdbcType=VARCHAR} AND status = 130
  </select>
  <select id="findAllByMT4acconut" resultMap="BaseResultMap" parameterType="java.lang.String">
    select
    <include refid="Base_Column_List" />
    from tb_trade_detail
    where mt4Account = #{mt4Account,jdbcType=VARCHAR}
    and (status = 130 or status = 230)
    and payer_type in (1,2,3)
  </select>
  <select id="findAllByMT4acconutReturnFee" resultMap="BaseResultMap" parameterType="java.lang.String">
    select
    <include refid="Base_Column_List" />
    from tb_trade_detail
    where mt4Account = #{mt4Account,jdbcType=VARCHAR}
    and (status = 130 or status = 230)
    and payer_type in (1,2,3)
    and id not in (select target_tid from tb_trade_adjust where type = 2 and target_tid is not null)
  </select>
  <select id="findByMerOrderNum" resultMap="BaseResultMap" parameterType="java.lang.String">
    select
    <include refid="Base_Column_List" />
    from tb_trade_detail
    where mer_order_num = #{merOrderNum,jdbcType=VARCHAR}
  </select>

  <select id="findDepositAmountByDate" resultType="java.lang.Double" parameterType="java.util.Map">
  select sum(actualMoney) from tb_trade_detail
  <where> oper_type=1 and status = 130 and mt4Account=#{mt4Account,jdbcType=INTEGER }
  <if test="date1!='' and date1!=null and date2!='' and date2!=null ">
    AND update_time BETWEEN #{date1,jdbcType=TIMESTAMP} AND #{date2,jdbcType=TIMESTAMP}
  </if>
  </where>
  </select>
  <select id="findWithDrawAmountByDate" resultType="java.lang.Double" parameterType="java.util.Map">
    select sum(actualMoney) from tb_trade_detail
    <where> oper_type=2 and status = 230 and mt4Account=#{mt4Account,jdbcType=INTEGER }
      <if test="date1!='' and date1!=null and date2!='' and date2!=null ">
        AND update_time BETWEEN #{date1,jdbcType=TIMESTAMP} AND #{date2,jdbcType=TIMESTAMP}
      </if>
    </where>
  </select>

  <select id="findFirstDepsoitDate" resultType="java.util.Date" parameterType="java.util.Map">
    select min(update_time) from tb_trade_detail
    <where> oper_type=1  and status= 130 and mt4Account=#{mt4Account,jdbcType=INTEGER }
      <if test="date1!='' and date1!=null and date2!='' and date2!=null ">
        AND update_time BETWEEN #{date1,jdbcType=TIMESTAMP} AND #{date2,jdbcType=TIMESTAMP}
      </if>
    </where>
  </select>
  <select id="findDepositMt4AccountByDate" resultType="java.lang.Integer" parameterType="java.util.Map">
    select DISTINCT  mt4Account from tb_trade_detail
    <where> oper_type=1 and is_del=0 and status = 130
      <if test="date1!='' and date1!=null and date2!='' and date2!=null ">
        AND create_time BETWEEN #{date1,jdbcType=TIMESTAMP} AND #{date2,jdbcType=TIMESTAMP}
      </if>
    </where>
  </select>
  <select id="findFirstDepsoitAmount" resultType="java.lang.Double" parameterType="java.util.Map">
    select actualMoney FROM  tb_trade_detail
    <where>
      update_time = (select min(update_time) from tb_trade_detail
      <where> oper_type=1 and status = 130 and mt4Account=#{mt4Account,jdbcType=INTEGER }
        <if test="date1!='' and date1!=null and date2!='' and date2!=null ">
          AND update_time BETWEEN #{date1,jdbcType=TIMESTAMP} AND #{date2,jdbcType=TIMESTAMP}
        </if>
      </where>)
    </where>
  </select>
  <select id="findTradedByMT4acconut" resultMap="BaseResultMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from tb_trade_detail
    <where> mt4Account = #{mt4Account,jdbcType=VARCHAR}
    and oper_type in(1, 2)
    and status in(130, 230)
    <if test="date1!='' and date1!=null and date2!='' and date2!=null ">
      AND create_time BETWEEN #{date1,jdbcType=TIMESTAMP} AND #{date2,jdbcType=TIMESTAMP}
    </if>
    </where>
  </select>
  <select id="getTotalDeposit" resultType="java.lang.Double" parameterType="java.util.Map">
    select sum(actualMoney) from tb_trade_detail
    <where> oper_type=1 and status =130
      <if test="date1!='' and date1!=null and date2!='' and date2!=null ">
        AND update_time BETWEEN #{date1,jdbcType=TIMESTAMP} AND #{date2,jdbcType=TIMESTAMP}
      </if>
      <if test="loginList != null">
      and mt4Account in
      <foreach item="login" index="index" collection="loginList" open="(" separator="," close=")">
        #{login}
      </foreach>
      </if>
      <if test="loginList == null">
      and mt4Account in ('')
     </if>
    </where>
  </select>
  <select id="getTotalWithDrawAmount" resultType="java.lang.Double" parameterType="java.util.Map">
    select sum(actualMoney) from tb_trade_detail
    <where> oper_type=2 and status = 230
      <if test="date1!='' and date1!=null and date2!='' and date2!=null ">
        AND update_time BETWEEN #{date1,jdbcType=TIMESTAMP} AND #{date2,jdbcType=TIMESTAMP}
      </if>
      <if test="loginList != null">
        and mt4Account in
        <foreach item="login" index="index" collection="loginList" open="(" separator="," close=")">
          #{login}
        </foreach>
      </if>
      <if test="loginList == null">
        and mt4Account in ('')
      </if>
    </where>
  </select>
</mapper>