<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd" >
<mapper namespace="com.fx.bonus.dao.ICashUserCommissionDetailDao" >
  <resultMap id="BaseResultMap" type="com.fx.bonus.model.CashUserCommissionDetail" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="amount" property="amount" jdbcType="NUMERIC" />
    <result column="payment_date" property="paymentDate" jdbcType="VARCHAR" />
    <result column="comment" property="comment" jdbcType="VARCHAR" />
    <result column="volume" property="volume" jdbcType="NUMERIC" />
    <result column="source" property="source" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="mt4Account" property="mt4account" jdbcType="INTEGER" />
    <result column="uid" property="uid" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, amount, payment_date, comment, volume, source, status, mt4Account,uid
  </sql>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from tb_CashUser_commission_detail
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.fx.bonus.model.CashUserCommissionDetail" useGeneratedKeys="true" keyProperty="id" >
    insert into tb_CashUser_commission_detail (amount, payment_date, comment, 
      volume, source, status, 
      mt4Account,uid)
    values (#{amount,jdbcType=NUMERIC}, #{paymentDate,jdbcType=VARCHAR}, #{comment,jdbcType=VARCHAR}, 
      #{volume,jdbcType=NUMERIC}, #{source,jdbcType=INTEGER}, #{status,jdbcType=TINYINT}, 
      #{mt4account,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.fx.bonus.model.CashUserCommissionDetail" >
    update tb_CashUser_commission_detail
    set amount = #{amount,jdbcType=NUMERIC},
      payment_date = #{paymentDate,jdbcType=VARCHAR},
      comment = #{comment,jdbcType=VARCHAR},
      volume = #{volume,jdbcType=NUMERIC},
      source = #{source,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT},
      mt4Account = #{mt4account,jdbcType=INTEGER},uid = #{uid,jdbcType=INTEGER
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from tb_CashUser_commission_detail
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from tb_CashUser_commission_detail
  </select>
  <select id="findCashUserCommissionDetailByAccountUid" resultMap="BaseResultMap" parameterType="map">
	select
	<include refid="Base_Column_List" />
	from tb_CashUser_commission_detail
	where payment_date between #{start,jdbcType=VARCHAR} and #{end,jdbcType=VARCHAR} 
	  <if test="uid != null">
       	  and uid = #{uid,jdbcType=INTEGER}
      </if>
      <if test="mt4account != null">
       	  and mt4Account = #{mt4account,jdbcType=INTEGER}
      </if>
  </select>
  
  <select id="pageQueryCount" resultType="java.lang.Integer" parameterType="java.util.Map" >
    select
    count(1)
    from tb_CashUser_commission_detail
    where payment_date between #{start,jdbcType=VARCHAR} and #{end,jdbcType=VARCHAR} and source=3 
    <if test="uid != 0">
        and uid = #{uid, jdbcType=INTEGER}
    </if>
  </select>
  <select id="pageQueryList" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select top ${limit}  
    <include refid="Base_Column_List" />
    from tb_CashUser_commission_detail
    where payment_date between #{start,jdbcType=VARCHAR} and #{end,jdbcType=VARCHAR} and source=3 
    <if test="uid != 0">
        and uid = #{uid, jdbcType=INTEGER}
    </if>
    <if test="offset gt 0">
    and (
    	  (SELECT MIN(id) FROM (SELECT TOP ${offset} id	FROM tb_CashUser_commission_detail 
    	   where payment_date between #{start,jdbcType=VARCHAR} and #{end,jdbcType=VARCHAR} and source=3 
		    <if test="uid != 0">
		        and uid = #{uid, jdbcType=INTEGER}
		    </if>
    	   ORDER BY id desc) AS T) > id
		)
    </if>
	order by id desc
  </select>
  
  <select id="queryCountByAccount" resultType="java.lang.Integer" parameterType="java.util.Map" >
    select
    count(1)
    from tb_CashUser_commission_detail
    where payment_date between #{start,jdbcType=VARCHAR} and #{end,jdbcType=VARCHAR} and source=3 
    <if test="mt4Account != 0">
        and mt4Account = #{mt4Account, jdbcType=INTEGER}
    </if>
  </select>
  <select id="queryByAccount" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select top ${limit}  
    <include refid="Base_Column_List" />
    from tb_CashUser_commission_detail
    where payment_date between #{start,jdbcType=VARCHAR} and #{end,jdbcType=VARCHAR} and source=3
    <if test="mt4Account != 0">
        and mt4Account = #{mt4Account, jdbcType=INTEGER}
    </if>
    <if test="offset gt 0">
    and (
    	  (SELECT MIN(id) FROM (SELECT TOP ${offset} id	FROM tb_CashUser_commission_detail 
    	   where payment_date between #{start,jdbcType=VARCHAR} and #{end,jdbcType=VARCHAR} and source=3
		    <if test="mt4Account != 0">
		        and mt4Account = #{mt4Account, jdbcType=INTEGER}
		    </if>
    	   ORDER BY id desc) AS T) > id
		)
    </if>
	order by id desc 
  </select>
  
  <select id="getCashUserCommissionDetailByUid" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select   
    <include refid="Base_Column_List" />
    from tb_CashUser_commission_detail
	where uid = #{uid,jdbcType=INTEGER}
  </select>
  <select id="getCashUserCommissionDetailByAccount" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select   
    <include refid="Base_Column_List" />
    from tb_CashUser_commission_detail
	where mt4Account = #{mt4Account, jdbcType=INTEGER}
  </select>
  <select id="queryCountByUid" resultType="java.lang.Integer" parameterType="java.util.Map" >
    select
    count(1)
    from tb_CashUser_commission_detail
    where  uid = #{uid, jdbcType=INTEGER}
  </select>
  <select id="queryByUid" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select top ${limit}  
    <include refid="Base_Column_List" />
    from tb_CashUser_commission_detail
    where  uid = #{uid, jdbcType=INTEGER}
    <if test="offset gt 0">
    and (
    	  (SELECT MIN(id) FROM (SELECT TOP ${offset} id	FROM tb_CashUser_commission_detail 
    	   where  uid = #{uid, jdbcType=INTEGER} 
    	   ORDER BY id desc) AS T) > id
		)
    </if>
	order by id desc
  </select>
  <select id="queryCountByMt4Account" resultType="java.lang.Integer" parameterType="java.util.Map" >
    select
    count(1)
    from tb_CashUser_commission_detail
    where  mt4Account = #{mt4Account, jdbcType=INTEGER}
  </select>
  <select id="queryByMt4Account" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select top ${limit}  
    <include refid="Base_Column_List" />
    from tb_CashUser_commission_detail
    where  mt4Account = #{mt4Account, jdbcType=INTEGER}
    <if test="offset gt 0">
    and (
    	  (SELECT MIN(id) FROM (SELECT TOP ${offset} id	FROM tb_CashUser_commission_detail 
    	   where  mt4Account = #{mt4Account, jdbcType=INTEGER}
    	   ORDER BY id desc) AS T) > id
		)
    </if>
	order by id desc
  </select>
  <select id="queryCountByUidDate" resultType="java.lang.Integer" parameterType="java.util.Map" >
    select
    count(1)
    from tb_CashUser_commission_detail
    where  uid = #{uid, jdbcType=INTEGER} and payment_date between #{start,jdbcType=VARCHAR} and #{end,jdbcType=VARCHAR}
  </select>
  <select id="queryByUidDate" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select top ${limit}  
    <include refid="Base_Column_List" />
    from tb_CashUser_commission_detail
    where  uid = #{uid, jdbcType=INTEGER} and payment_date between #{start,jdbcType=VARCHAR} and #{end,jdbcType=VARCHAR}
    <if test="offset gt 0">
    and (
    	  (SELECT MIN(id) FROM (SELECT TOP ${offset} id	FROM tb_CashUser_commission_detail 
    	   where  uid = #{uid, jdbcType=INTEGER} and payment_date between #{start,jdbcType=VARCHAR} and #{end,jdbcType=VARCHAR}
    	   ORDER BY id desc) AS T) > id
		)
    </if>
	order by id desc
  </select>
</mapper>