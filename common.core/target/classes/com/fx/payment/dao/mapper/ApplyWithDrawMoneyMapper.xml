<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd" >
<mapper namespace="com.fx.payment.dao.IApplyWithDrawMoneyDao" >
  <resultMap id="BaseResultMap" type="com.fx.payment.model.ApplyWithDrawMoney" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="uid" property="uid" jdbcType="INTEGER" />
    <result column="trade_id" property="tradeId" jdbcType="INTEGER" />
    <result column="withdraw_money" property="withdrawMoney" jdbcType="NUMERIC" />
    <result column="bank_name" property="bankName" jdbcType="VARCHAR" />
    <result column="bank_address" property="bankAddress" jdbcType="VARCHAR" />
    <result column="bank_swift_code" property="bankSwiftCode" jdbcType="VARCHAR" />
    <result column="beneficiary_account_no" property="beneficiaryAccountNo" jdbcType="VARCHAR" />
    <result column="beneficiary_account_name" property="beneficiaryAccountName" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="create_user" property="createUser" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="CHAR" />
    <result column="create_ip" property="createIp" jdbcType="VARCHAR" />
    <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="CHAR" />
    <result column="update_ip" property="updateIp" jdbcType="VARCHAR" />
    <result column="is_del" property="isDel" jdbcType="TINYINT" />
    <result column="branchName" property="branchName" jdbcType="VARCHAR" />
    <result column="refuseReason" property="refuseReason" jdbcType="VARCHAR" />
    <result column="fee" property="fee" jdbcType="NUMERIC" />
    <result column="reason" property="reason" jdbcType="VARCHAR" />
    <result column="commit" property="commit" jdbcType="VARCHAR" />

  </resultMap>
  <sql id="Base_Column_List" >
    id, uid, trade_id, withdraw_money, bank_name, bank_address, bank_swift_code, beneficiary_account_no, beneficiary_account_name,
    status, create_user, create_time, create_ip, update_user, update_time, update_ip, is_del,branchName,refuseReason,fee,reason,comment
  </sql>
  <sql id="Base_Column_Listdrawr" >
    w.id, w.uid, w.trade_id, w.withdraw_money, w.bank_name, w.bank_address, w.bank_swift_code, w.beneficiary_account_no, w.beneficiary_account_name,
    w.status, w.create_user, w.create_time, w.create_ip, w.update_user, w.update_time, w.update_ip, w.is_del,w.branchName,w.refuseReason,w.fee,w.reason,w.comment
  </sql>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from tb_apply_withdraw_money
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.fx.payment.model.ApplyWithDrawMoney" useGeneratedKeys="true" keyProperty="id" >
    insert into tb_apply_withdraw_money (uid, trade_id, withdraw_money, bank_name, bank_address, bank_swift_code, beneficiary_account_no, beneficiary_account_name,
      status, create_user, create_time, 
      create_ip, update_user, update_time, 
      update_ip, is_del,branchName,refuseReason,fee,reason,comment)
    values (#{uid,jdbcType=INTEGER}, #{tradeId,jdbcType=INTEGER}, #{withdrawMoney,jdbcType=NUMERIC}, 
      #{bankName,jdbcType=VARCHAR}, #{bankAddress,jdbcType=VARCHAR}, #{bankSwiftCode,jdbcType=VARCHAR},
      #{beneficiaryAccountNo,jdbcType=VARCHAR}, #{beneficiaryAccountName,jdbcType=VARCHAR},
      #{status,jdbcType=TINYINT}, #{createUser,jdbcType=VARCHAR}, #{createTime,jdbcType=CHAR}, 
      #{createIp,jdbcType=VARCHAR}, #{updateUser,jdbcType=VARCHAR}, #{updateTime,jdbcType=CHAR}, 
      #{updateIp,jdbcType=VARCHAR}, #{isDel,jdbcType=TINYINT}, #{branchName,jdbcType=VARCHAR}, #{refuseReason,jdbcType=VARCHAR}, #{fee,jdbcType=NUMERIC}, #{reason,jdbcType=VARCHAR}, #{comment,jdbcType=VARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.fx.payment.model.ApplyWithDrawMoney" >
    update tb_apply_withdraw_money
    set uid = #{uid,jdbcType=INTEGER},
      trade_id = #{tradeId,jdbcType=INTEGER},
      withdraw_money = #{withdrawMoney,jdbcType=NUMERIC},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_address = #{bankAddress,jdbcType=VARCHAR},
      bank_swift_code = #{bankSwiftCode,jdbcType=VARCHAR},
      beneficiary_account_no = #{beneficiaryAccountNo,jdbcType=VARCHAR},
      beneficiary_account_name = #{beneficiaryAccountName,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      create_user = #{createUser,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=CHAR},
      create_ip = #{createIp,jdbcType=VARCHAR},
      update_user = #{updateUser,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=CHAR},
      update_ip = #{updateIp,jdbcType=VARCHAR},
      is_del = #{isDel,jdbcType=TINYINT},
      branchName = #{branchName,jdbcType=VARCHAR},
      refuseReason = #{refuseReason,jdbcType=VARCHAR},
      fee = #{fee,jdbcType=NUMERIC},
      reason = #{reason,jdbcType=VARCHAR},
      comment = #{comment,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from tb_apply_withdraw_money
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from tb_apply_withdraw_money
  </select>
  
  <select id="pageQueryCount" resultType="java.lang.Integer" parameterType="java.util.Map" >
    select
    count(1)
    from tb_apply_withdraw_money
    where is_del = 0 
    <if test="uid != null">
        and uid = #{uid, jdbcType=INTEGER}
    </if>
    <if test="status != null">
        <if  test="status != -1">
        and status = #{status, jdbcType=TINYINT}
        </if>
    </if>
  </select>
  
  <select id="pageQueryList" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select top ${limit}  
    <include refid="Base_Column_List" />
    from tb_apply_withdraw_money
    where is_del = 0 
    <if test="uid != null">
        and uid = #{uid, jdbcType=INTEGER}
    </if>
    <if test="status != null">
        <if  test="status != -1">
        and status = #{status, jdbcType=TINYINT}
        </if>
    </if>
    <if test="offset gt 0">
    and (
    	(SELECT MIN(id) FROM (SELECT TOP ${offset} id	FROM tb_apply_withdraw_money where is_del = 0 
    	<if test="uid != null">
       		 and uid = #{uid, jdbcType=INTEGER}
        </if>
        <if test="status != null">
	        <if  test="status != -1">
	        and status = #{status, jdbcType=TINYINT}
	        </if>
	    </if>
    	 ORDER BY id desc) AS T) > id
		)
    </if>
	order by id desc
  </select>

  <select id="selectwithdraw" resultMap="BaseResultMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_Listdrawr" />
    from tb_apply_withdraw_money w,tb_trade_detail d
    where w.trade_id = d.id
    <if test="statusq != -1">
      and w.status = #{statusq, jdbcType=TINYINT}
    </if>
    <if test="userq != null and userq !='' ">
      and w.beneficiary_account_name like #{userq, jdbcType=VARCHAR}
    </if>
  </select>
  <select id="selectwithdrawMoreTable" resultMap="BaseResultMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_Listdrawr" />
    from tb_apply_withdraw_money w,tb_trade_detail t,tb_user_register r
    where w.trade_id = t.id
    AND t.uid = r.id
    AND w.is_del = 0
    <if test="statusq != -1">
      and w.status = #{statusq, jdbcType=TINYINT}
    </if>
    <if test="userq != null and userq !='' ">
      AND ( r.email LIKE #{userq, jdbcType=VARCHAR} OR r.enName LIKE #{userq, jdbcType=VARCHAR} OR t.mt4Account LIKE #{userq, jdbcType=VARCHAR})
    </if>
    order by w.status asc , w.update_time desc
  </select>
  <select id="selsectNopage" resultMap="BaseResultMap" parameterType="java.util.Map">
    select
  <include refid="Base_Column_List" />
    from tb_apply_withdraw_money
    where is_del = 0
    <if test="uid != null">
      and uid = #{uid, jdbcType=INTEGER}
    </if>
    <if test="status != null">
      <if  test="status != -1">
        and status = #{status, jdbcType=TINYINT}
      </if>
    </if>
    order by update_time desc
  </select>
</mapper>