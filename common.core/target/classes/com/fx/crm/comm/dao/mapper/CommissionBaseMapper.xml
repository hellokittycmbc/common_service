<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd" >
<mapper namespace="com.fx.crm.comm.dao.ICommissionBaseDao" >
  <resultMap id="BaseResultMap" type="com.fx.crm.comm.model.CommissionBase" >
    <id column="guid" property="guid" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="ib_id" property="ibId" jdbcType="VARCHAR" />
    <result column="ib_id_type" property="ibIdType" jdbcType="CHAR" />
    <result column="hand_commission" property="handCommission" jdbcType="DECIMAL" />
    <result column="pip_commission" property="pipCommission" jdbcType="DECIMAL" />
    <result column="mt4_commission" property="mt4Commission" jdbcType="DECIMAL" />
    <result column="mt4_commission_agent" property="mt4CommissionAgent" jdbcType="DECIMAL" />
    <result column="close_time" property="closeTime" jdbcType="TIMESTAMP" />
    <result column="ticket" property="ticket" jdbcType="VARCHAR" />
    <result column="comment" property="comment" jdbcType="VARCHAR" />
    <result column="volume" property="volume" jdbcType="DECIMAL" />
    <result column="source" property="source" jdbcType="CHAR" />
    <result column="status" property="status" jdbcType="CHAR" />
    <result column="mt4Account" property="mt4account" jdbcType="INTEGER" />
    <result column="SYMBOL" property="symbol" jdbcType="CHAR" />
    <result column="SWAPS" property="swaps" jdbcType="DECIMAL" />
    <result column="PROFIT" property="profit" jdbcType="DECIMAL" />
    <result column="settleDate" property="settledate" jdbcType="TIMESTAMP" />
    <result column="createDate" property="createdate" jdbcType="TIMESTAMP" />
    <result column="updateDate" property="updatedate" jdbcType="TIMESTAMP" />
    
    <result column="dataSourceId" property="dataSourceId" jdbcType="INTEGER" />
    <result column="mt4DataSourceType" property="mt4DataSourceType" jdbcType="INTEGER" />
    <result column="unitPrice" property="unitPrice" jdbcType="DECIMAL" />
    <result column="rate" property="rate" jdbcType="DECIMAL" />
    <result column="parRate" property="parRate" jdbcType="DECIMAL" />
    <result column="settMode" property="settMode" jdbcType="VARCHAR" />
    <result column="tradeCateId" property="tradeCateId" jdbcType="INTEGER" />
    <result column="agentAccount" property="agentAccount" jdbcType="INTEGER" />
    <result column="porgation" property="porgation" jdbcType="DECIMAL" />
    <result column="specialId" property="specialId" jdbcType="VARCHAR" />
      <result column="mt4AccountGroup" property="mt4AccountGroup" jdbcType="VARCHAR" />
      <result column="rules" property="rules" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    guid, user_id, ib_id, ib_id_type, hand_commission, pip_commission, mt4_commission, 
    mt4_commission_agent, close_time, ticket, comment, volume, source, status, mt4Account, 
    SYMBOL, SWAPS, PROFIT, settleDate, createDate, updateDate,dataSourceId,mt4DataSourceType,unitPrice,rate,parRate,settMode,tradeCateId,agentAccount,porgation,specialId,mt4AccountGroup,rules
  </sql>
  
  
  <resultMap id="AccountSwapsMap" type="com.fx.crm.comm.model.CommissionBase">
        <id column="mt4Account" property="mt4account" jdbcType="INTEGER" />
        <result column="SWAPS" property="swaps" jdbcType="DECIMAL" />
        <result column="pip_commission" property="pipCommission" jdbcType="DECIMAL" />
        <result column="tradeCateId" property="tradeCateId" jdbcType="INTEGER" />
        <result column="volume" property="volume" jdbcType="DECIMAL" />
        <result column="PROFIT" property="profit" jdbcType="DECIMAL" />
    </resultMap>
    
    <resultMap id="AccountSalesMap" type="com.fx.crm.comm.model.CommissionBase">
        <id column="mt4Account" property="mt4account" jdbcType="INTEGER" />
        <result column="ib_id" property="ibId" jdbcType="VARCHAR" />
        <result column="pip_commission" property="pipCommission" jdbcType="DECIMAL" />
        <result column="volume" property="volume" jdbcType="DECIMAL" />
    </resultMap>
    
  <resultMap id="AgentAccountMap" type="com.fx.crm.comm.model.CommissionBase">
        <id column="agentAccount" property="agentAccount" jdbcType="INTEGER" />
        <result column="volume" property="volume" jdbcType="DECIMAL" />
        <result column="pip_commission" property="pipCommission" jdbcType="DECIMAL" />
    </resultMap>
    
<resultMap id="TradingAccountMap" type="com.fx.crm.comm.model.CommissionBase">
        <id column="tradeCateId" property="tradeCateId" jdbcType="INTEGER" />
        <result column="volume" property="volume" jdbcType="DECIMAL" />
        <result column="pip_commission" property="pipCommission" jdbcType="DECIMAL" />
    </resultMap>

    <resultMap id="TradingAccountMapMt4Account" type="com.fx.crm.comm.model.CommissionBase">
        <id column="tradeCateId" property="tradeCateId" jdbcType="INTEGER" />
        <result column="mt4Account" property="mt4account" jdbcType="INTEGER" />
        <result column="volume" property="volume" jdbcType="DECIMAL" />
        <result column="pip_commission" property="pipCommission" jdbcType="DECIMAL" />
    </resultMap>
    
    <resultMap id="AgentUserMap" type="com.fx.crm.comm.model.CommissionBase">
        <id column="ib_id" property="ibId" jdbcType="VARCHAR" />
        <result column="volume" property="volume" jdbcType="DECIMAL" />
        <result column="pip_commission" property="pipCommission" jdbcType="DECIMAL" />
    </resultMap>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from tb_IB_commission_base
    where guid = #{guid,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.fx.crm.comm.model.CommissionBase" >
    insert into tb_IB_commission_base (guid, user_id, ib_id, 
      ib_id_type, hand_commission, pip_commission, 
      mt4_commission, mt4_commission_agent, close_time, 
      ticket, comment, volume, 
      source, status, mt4Account, 
      SYMBOL, SWAPS, PROFIT, 
      settleDate, createDate, updateDate,dataSourceId,mt4DataSourceType,unitPrice,rate,parRate,settMode,tradeCateId,agentAccount,porgation,specialId,mt4AccountGroup,rules
      )
    values (#{guid,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{ibId,jdbcType=VARCHAR}, 
      #{ibIdType,jdbcType=CHAR}, #{handCommission,jdbcType=DECIMAL}, #{pipCommission,jdbcType=DECIMAL}, 
      #{mt4Commission,jdbcType=DECIMAL}, #{mt4CommissionAgent,jdbcType=DECIMAL}, #{closeTime,jdbcType=TIMESTAMP}, 
      #{ticket,jdbcType=VARCHAR}, #{comment,jdbcType=VARCHAR}, #{volume,jdbcType=DECIMAL}, 
      #{source,jdbcType=CHAR}, #{status,jdbcType=CHAR}, #{mt4account,jdbcType=INTEGER}, 
      #{symbol,jdbcType=CHAR}, #{swaps,jdbcType=DECIMAL}, #{profit,jdbcType=DECIMAL}, 
      #{settledate,jdbcType=TIMESTAMP}, #{createdate,jdbcType=TIMESTAMP}, #{updatedate,jdbcType=TIMESTAMP}, #{dataSourceId,jdbcType=INTEGER}, #{mt4DataSourceType,jdbcType=INTEGER}
      , #{unitPrice,jdbcType=DECIMAL}, #{rate,jdbcType=DECIMAL}, #{parRate,jdbcType=DECIMAL}, #{settMode,jdbcType=VARCHAR}, #{tradeCateId,jdbcType=INTEGER}, #{agentAccount,jdbcType=INTEGER}
      , #{porgation,jdbcType=DECIMAL}, #{specialId,jdbcType=VARCHAR}, #{mt4AccountGroup,jdbcType=VARCHAR}, #{rules,jdbcType=INTEGER}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.fx.crm.comm.model.CommissionBase" >
    update tb_IB_commission_base
    set user_id = #{userId,jdbcType=VARCHAR},
      ib_id = #{ibId,jdbcType=VARCHAR},
      ib_id_type = #{ibIdType,jdbcType=CHAR},
      hand_commission = #{handCommission,jdbcType=DECIMAL},
      pip_commission = #{pipCommission,jdbcType=DECIMAL},
      mt4_commission = #{mt4Commission,jdbcType=DECIMAL},
      mt4_commission_agent = #{mt4CommissionAgent,jdbcType=DECIMAL},
      close_time = #{closeTime,jdbcType=TIMESTAMP},
      ticket = #{ticket,jdbcType=VARCHAR},
      comment = #{comment,jdbcType=VARCHAR},
      volume = #{volume,jdbcType=DECIMAL},
      source = #{source,jdbcType=CHAR},
      status = #{status,jdbcType=CHAR},
      mt4Account = #{mt4account,jdbcType=INTEGER},
      SYMBOL = #{symbol,jdbcType=CHAR},
      SWAPS = #{swaps,jdbcType=DECIMAL},
      PROFIT = #{profit,jdbcType=DECIMAL},
      settleDate = #{settledate,jdbcType=TIMESTAMP},
      createDate = #{createdate,jdbcType=TIMESTAMP},
      updateDate = #{updatedate,jdbcType=TIMESTAMP},
      
      dataSourceId = #{dataSourceId,jdbcType=INTEGER},
      mt4DataSourceType = #{mt4DataSourceType,jdbcType=INTEGER},
      unitPrice = #{unitPrice,jdbcType=DECIMAL},
      rate = #{rate,jdbcType=DECIMAL},
      parRate = #{parRate,jdbcType=DECIMAL},
      settMode = #{settMode,jdbcType=VARCHAR},
      tradeCateId = #{tradeCateId,jdbcType=INTEGER},
      agentAccount = #{agentAccount,jdbcType=INTEGER},
      porgation = #{porgation,jdbcType=DECIMAL},
      specialId = #{specialId,jdbcType=VARCHAR},
       mt4AccountGroup = #{mt4AccountGroup,jdbcType=VARCHAR},
        rules = #{rules,jdbcType=INTEGER}
    where guid = #{guid,jdbcType=VARCHAR}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from tb_IB_commission_base
    where guid = #{guid,jdbcType=VARCHAR}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from tb_IB_commission_base
  </select>
  <select id="getCommissionBaseByIbId" resultMap="BaseResultMap" parameterType="map">
    select
    <include refid="Base_Column_List" />
    from tb_IB_commission_base
    where ib_id = #{ibId,jdbcType=VARCHAR} and close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
    <if test="mt4Account != null">
        and mt4Account = #{mt4Account, jdbcType=INTEGER}
    </if>
    <if test="dataSourceId != null">
        and dataSourceId = #{dataSourceId, jdbcType=INTEGER}
    </if>
    <if test="userMT4Account != null">
        and agentAccount = #{userMT4Account, jdbcType=INTEGER}
    </if>
  </select>
  
  <select id="getCommissionBaseByAgentAccount" resultMap="AgentAccountMap" parameterType="map">
    select
    agentAccount,sum(volume) volume,sum(pip_commission/parRate) pip_commission
    from tb_IB_commission_base
    where close_time between #{startDate,jdbcType=TIMESTAMP} and #{endDate,jdbcType=TIMESTAMP}
    
    <if test="dataSourceId != null">
        and dataSourceId = #{dataSourceId, jdbcType=INTEGER}
    </if>
    <if test="login != null">
        and agentAccount = #{login, jdbcType=INTEGER}
    </if>
     group by ib_id,agentAccount order by agentAccount
  </select>
    <select id="getCommissionBaseByAgentAccountTrader" resultMap="AgentAccountMap" parameterType="map">
        select
        agentAccount,sum(volume) volume,sum(pip_commission/parRate) pip_commission
        from tb_IB_commission_base
        where close_time between #{startDate,jdbcType=TIMESTAMP} and #{endDate,jdbcType=TIMESTAMP}

        <if test="dataSourceId != null">
            and dataSourceId = #{dataSourceId, jdbcType=INTEGER}
        </if>
        <if test="loginList != null">
            and (mt4Account in
            <foreach item="mt4Account" index="index" collection="loginList" open="(" separator="," close=")">
                #{mt4Account}
            </foreach>
            or agentAccount in
            <foreach item="ageAccount" index="index" collection="loginList" open="(" separator="," close=")">
                #{ageAccount}
            </foreach>)
        </if>
        <if test="loginList == null">
            and mt4Account in ('')
        </if>
        <!-- <if test="ibId!=null">and ib_id = #{ibId,jdbcType=VARCHAR}</if> -->
        <if test="login != null">
            and agentAccount like #{login, jdbcType=VARCHAR}
        </if>
        <if test="userMT4Accounts != null">
            and (mt4Account in
            <foreach item="uid" index="index" collection="userMT4Accounts" open="(" separator="," close=")">
                #{uid.mt4Account}
            </foreach>
            or agentAccount in
            <foreach item="ageAccount" index="index" collection="loginList" open="(" separator="," close=")">
                #{ageAccount}
            </foreach>)
        </if>
        group by ib_id,agentAccount order by agentAccount
    </select>
  
  <select id="getCommissionBaseByAccount" resultMap="BaseResultMap" parameterType="map">
    select
    <include refid="Base_Column_List" />
    from tb_IB_commission_base
    where ib_id = #{ibId,jdbcType=VARCHAR} and close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
    <if test="mt4Account != null">
        and mt4Account = #{mt4Account, jdbcType=INTEGER}
    </if>
     <if test="agentAccount != null">
        and agentAccount = #{agentAccount, jdbcType=INTEGER}
    </if>
    <if test="dataSourceId != null">
        and dataSourceId = #{dataSourceId, jdbcType=INTEGER}
    </if>
    <if test="tradeCateId != null">
        and tradeCateId = #{tradeCateId, jdbcType=INTEGER}
    </if>
  </select>
  
  <select id="getCommissionBaseByAgentUser" resultMap="AgentUserMap" parameterType="map">
    select
    ib_id,mt4Account,sum(volume) volume ,sum(pip_commission/parRate) pipCommission
    from tb_IB_commission_base
    where close_time between #{startDate,jdbcType=TIMESTAMP} and #{endDate,jdbcType=TIMESTAMP}
    <if test="login != null">
        and mt4Account = #{login, jdbcType=INTEGER}
    </if>
      <if test="userMT4Accounts != null">
          and mt4Account IN
          <foreach item="usermt4Account" index="index" collection="userMT4Accounts" open="(" separator="," close=")">
              #{usermt4Account.mt4Account}
          </foreach>
      </if>
    <if test="ibId!=null"> and  ib_id = #{ibId,jdbcType=VARCHAR}</if>
    <if test="loginList != null">
    	
        and (mt4Account in
        <foreach item="mt4Account" index="index" collection="loginList" open="(" separator="," close=")">
            #{mt4Account}
        </foreach>
        <if test="agentAccount != null">
	        or agentAccount = #{agentAccount, jdbcType=INTEGER}
	    </if>
	    )
    </if>
    <if test="loginList==null">
    	<if test="agentAccount != null">
	        and agentAccount = #{agentAccount, jdbcType=INTEGER}
	    </if>
    </if>
    
    <if test="dataSourceId != null">
        and dataSourceId = #{dataSourceId, jdbcType=INTEGER}
    </if>
    group by user_id,ib_id,mt4Account,ticket order by mt4Account
  </select>

  <select id="getCommissionBaseByAccountGroup" resultMap="AccountSwapsMap" parameterType="com.fx.crm.comm.model.CommissionBase">
    select
    m.mt4Account,sum(m.swaps) swaps ,sum(m.pip_commission) pipCommission ,m.tradeCateId ,sum(m.volume) volume ,sum(m.profit) profit
    from tb_IB_commission_base m,
      (
      SELECT
      A.*
      FROM
      tb_user_register A ,tb_user_register u, tb_sys_organization org
      WHERE A.level_path.IsDescendantOf(u.level_path)=1
      and A.is_del = 0
      and u.org_id = org.id
      and u.website_user_type =6
      and u.is_del = 0
      ${sqlMap.dsf}
      and u.id not in (
      select a.id from
      (SELECT
      u.*
      FROM
      tb_user_register u,
      tb_sys_organization org
      WHERE
      u.org_id = org.id
      and u.website_user_type =6
      and u.is_del = 0
      ${sqlMap.dsf}
      ) as a
      ,
      (SELECT
      u.*
      FROM
      tb_user_register u,
      tb_sys_organization org
      WHERE
      u.org_id = org.id
      and u.website_user_type =6
      and u.is_del = 0
      ${sqlMap.dsf}
      ) as b
      where a.level_path.IsDescendantOf(b.level_path)=1 and a.id != b.id
      )
      <if test="sqlMap.params.ibId != null and sqlMap.params.ibId > 0 and sqlMap.params.flagIbid == null">
          and A.level_path.IsDescendantOf ((SELECT level_path from tb_user_register where id = #{sqlMap.params.ibId, jdbcType=INTEGER})) = 1
      </if>
      ) as A
      where (
      (m.user_id = A.id AND m.ib_id = A.id)
      OR (
      m.user_id != A.id
      AND m.ib_id = A.id
      )
      )
    and m.close_time between #{sqlMap.params.startDate,jdbcType=TIMESTAMP} and #{sqlMap.params.endDate,jdbcType=TIMESTAMP}

      <if test="sqlMap.params.login != null and sqlMap.params.login !='' ">
        and m.mt4Account = #{sqlMap.params.login, jdbcType=INTEGER}
     </if>
      <if test="sqlMap.params.uidList != null">
          and m.user_id in
          <foreach item="uid" index="index" collection="sqlMap.params.uidList" open="(" separator="," close=")">
              #{uid.id}
          </foreach>
      </if>
      <if test="sqlMap.params.ibId != null and sqlMap.params.flagIbid != null">
          and m.ib_id = #{sqlMap.params.ibId, jdbcType=VARCHAR}
      </if>
      <if test="sqlMap.params.idList !=null">
          and m.ib_id IN
          <foreach item="id" index="index" collection="sqlMap.params.idList" open="(" separator="," close=")">
              #{id}
          </foreach>
      </if>
      <if test="sqlMap.params.loginList != null">
          and m.mt4Account in
          <foreach item="mt4Account" index="index" collection="sqlMap.params.loginList" open="(" separator="," close=")">
              #{mt4Account}
          </foreach>
      </if>
      <if test="sqlMap.params.agentUserList!=null">
          <if test="sqlMap.params.agentUserList.size()==0">
              and m.ib_id in ('')
          </if>
          <if test="sqlMap.params.agentUserList.size()&gt;0">
              and m.ib_id in
              <foreach item="agentUser" index="index" collection="sqlMap.params.agentUserList" open="(" separator="," close=")">
                  #{agentUser.id}
              </foreach>
          </if>
      </if>
    <if test="sqlMap.params.dataSourceId != null">
        and m.dataSourceId = #{sqlMap.params.dataSourceId, jdbcType=INTEGER}
    </if>
    <if test="sqlMap.params.tradingGroupId != null">
        and m.tradeCateId = #{sqlMap.params.tradingGroupId, jdbcType=INTEGER}
    </if> group by m.mt4Account,m.tradeCateId order by m.mt4Account,m.tradeCateId
  </select>
  
  <select id="getCommissionBaseByTradingAccount" resultMap="TradingAccountMap" parameterType="map">
    select
    tradeCateId,sum(volume) volume,sum(pip_commission/parRate) pip_commission,agentAccount
    from tb_IB_commission_base
    where close_time between #{startDate,jdbcType=TIMESTAMP} and #{endDate,jdbcType=TIMESTAMP}
   
    <!-- <if test="ibId!=null">
    	and ib_id = #{ibId,jdbcType=VARCHAR}
    </if> -->
      <if test="userId!=null">
          and ib_id = #{userId,jdbcType=INTEGER}
      </if>
    <if test="dataSourceId != null">
        and dataSourceId = #{dataSourceId, jdbcType=INTEGER}
    </if>
    <if test="loginList != null">
        and (mt4Account in
        <foreach item="mt4Account" index="index" collection="loginList" open="(" separator="," close=")">
            #{mt4Account}
        </foreach>
        <if test="login != null">
	        or agentAccount = #{login, jdbcType=INTEGER}
	    </if>
	    )
    </if>
    <if test="loginList == null">
    	<if test="login != null">
	        and agentAccount = #{login, jdbcType=INTEGER}
	    </if>
    </if>
    <if test="tradingGroupId != null">
        and tradeCateId = #{tradingGroupId, jdbcType=INTEGER}
    </if> group by tradeCateId,agentAccount,ib_id
    order by tradeCateId
  </select>
  
  <select id="getCommissionBasedDetailByTradingAccount" resultMap="TradingAccountMap" parameterType="map">
    select
    tradeCateId,sum(volume) volume,sum(pip_commission/parRate) pip_commission
    from tb_IB_commission_base
    where close_time between #{startDate,jdbcType=TIMESTAMP} and #{endDate,jdbcType=TIMESTAMP}
    <if test="login != null">
        and mt4Account = #{login, jdbcType=INTEGER}
    </if>
    <!-- <if test="ibIds!=null">
    	and ib_id = #{ibIds,jdbcType=VARCHAR}
    </if> -->
    <if test="agentAccount != null">
        and agentAccount = #{agentAccount, jdbcType=INTEGER}
    </if>
    <if test="dataSourceId != null">
        and dataSourceId = #{dataSourceId, jdbcType=INTEGER}
    </if>
    <if test="tradingGroupId != null">
        and tradeCateId = #{tradingGroupId, jdbcType=INTEGER}
    </if> group by tradeCateId,agentAccount,ib_id
    order by tradeCateId
  </select>

    <select id="getCommissionBasedDetailByTradingAccountByMT4Account" resultMap="TradingAccountMapMt4Account" parameterType="map">
        select
        tradeCateId,sum(volume) volume,sum(pip_commission/parRate) pip_commission,mt4Account
        from tb_IB_commission_base
        where close_time between #{startDate,jdbcType=TIMESTAMP} and #{endDate,jdbcType=TIMESTAMP}
        <if test="login != null">
            and mt4Account = #{login, jdbcType=INTEGER}
        </if>
        <!-- <if test="ibIds!=null">
            and ib_id = #{ibIds,jdbcType=VARCHAR}
        </if> -->
        <if test="agentAccount != null">
            and agentAccount = #{agentAccount, jdbcType=INTEGER}
        </if>
        <if test="dataSourceId != null">
            and dataSourceId = #{dataSourceId, jdbcType=INTEGER}
        </if>
        <if test="tradingGroupId != null">
            and tradeCateId = #{tradingGroupId, jdbcType=INTEGER}
        </if> group by tradeCateId,agentAccount,mt4Account,ib_id
        order by tradeCateId
    </select>
  
  <select id="getCommissionBaseByTradingGroup" resultMap="BaseResultMap" parameterType="com.fx.crm.comm.model.CommissionBase">
      select  m.guid, m.user_id, m.ib_id, m.ib_id_type, m.hand_commission, m.pip_commission, m.mt4_commission,
      m.mt4_commission_agent, m.close_time, m.ticket, m.comment, m.volume, m.source, m.status, m.mt4Account,
      m.SYMBOL, m.SWAPS, m.PROFIT, m.settleDate, m.createDate, m.updateDate,m.dataSourceId,m.mt4DataSourceType,m.unitPrice,m.rate,m.parRate,m.settMode,m.tradeCateId,m.agentAccount
      from tb_IB_commission_base m,
      (
      SELECT
      A.*
      FROM
      tb_user_register A ,tb_user_register u, tb_sys_organization org
      WHERE A.level_path.IsDescendantOf(u.level_path)=1
      and A.is_del = 0
      and u.org_id = org.id
      and u.website_user_type =6
      and u.is_del = 0
      ${sqlMap.dsf}
      and u.id not in (
      select a.id from
      (SELECT
      u.*
      FROM
      tb_user_register u,
      tb_sys_organization org
      WHERE
      u.org_id = org.id
      and u.website_user_type =6
      and u.is_del = 0
      ${sqlMap.dsf}
      ) as a
      ,
      (SELECT
      u.*
      FROM
      tb_user_register u,
      tb_sys_organization org
      WHERE
      u.org_id = org.id
      and u.website_user_type =6
      and u.is_del = 0
      ${sqlMap.dsf}
      ) as b
      where a.level_path.IsDescendantOf(b.level_path)=1 and a.id != b.id
      )
      <if test="sqlMap.params.ibId != null and sqlMap.params.ibId > 0 and sqlMap.params.flagIbid == null">
          and A.level_path.IsDescendantOf ((SELECT level_path from tb_user_register where id = #{sqlMap.params.ibId, jdbcType=INTEGER})) = 1
      </if>
      ) as A
      where ((m.user_id =A.id and m.ib_id=A.id) or (m.user_id !=A.id and m.ib_id=A.id))
        and m.close_time between #{sqlMap.params.startDate,jdbcType=TIMESTAMP} and #{sqlMap.params.endDate,jdbcType=TIMESTAMP}
        <if test="sqlMap.params.login != null">
            and m.mt4Account = #{sqlMap.params.login, jdbcType=INTEGER}
        </if>
        <if test="sqlMap.params.ibId != null and sqlMap.params.flagIbid != null">
            and m.ib_id = #{sqlMap.params.ibId, jdbcType=VARCHAR}
        </if>
          <if test="sqlMap.params.idList != null">
              and m.ib_id IN
              <foreach item="id" index="index" collection="sqlMap.params.idList"
                       open="(" separator="," close=")">
                  #{id}
              </foreach>
          </if>
          <if test="sqlMap.params.agentUserList!=null">
              <if test="sqlMap.params.agentUserList.size()==0">
                  and m.ib_id in ('')
              </if>
              <if test="sqlMap.params.agentUserList.size()&gt;0">
                  and m.ib_id in
                  <foreach item="agentUser" index="index" collection="sqlMap.params.agentUserList" open="(" separator="," close=")">
                      #{agentUser.id}
                  </foreach>
              </if>
          </if>
          <if test="sqlMap.params.loginList != null">
              and m.mt4Account in
              <foreach item="mt4Account" index="index" collection="sqlMap.params.loginList" open="(" separator="," close=")">
                  #{mt4Account}
              </foreach>
          </if>
        <if test="sqlMap.params.dataSourceId != null">
            and m.dataSourceId = #{sqlMap.params.dataSourceId, jdbcType=INTEGER}
        </if>
        <if test="sqlMap.params.tradingGroupId != null">
            and m.tradeCateId = #{sqlMap.params.tradingGroupId, jdbcType=INTEGER}
        </if>
        order by m.close_time
  </select>
    <select id="getCommissionBaseByTradingGroupTrader" resultMap="BaseResultMap" parameterType="com.fx.crm.comm.model.CommissionBase">

        select  m.guid, m.user_id, m.ib_id, m.ib_id_type, m.hand_commission, m.pip_commission, m.mt4_commission,
        m.mt4_commission_agent, m.close_time, m.ticket, m.comment, m.volume, m.source, m.status, m.mt4Account,
        m.SYMBOL, m.SWAPS, m.PROFIT, m.settleDate, m.createDate, m.updateDate,m.dataSourceId,m.mt4DataSourceType,m.unitPrice,m.rate,m.parRate,m.settMode,m.tradeCateId,m.agentAccount
        from tb_IB_commission_base m,
        (
        SELECT
        A.*
        FROM
        tb_user_register A ,tb_user_register u, tb_sys_organization org
        WHERE A.level_path.IsDescendantOf(u.level_path)=1
        and A.is_del = 0
        and u.org_id = org.id
        and u.website_user_type =6
        and u.is_del = 0
        and u.id not in (
        select a.id from
        (SELECT
        u.*
        FROM
        tb_user_register u,
        tb_sys_organization org
        WHERE
        u.org_id = org.id
        and u.website_user_type =6
        and u.is_del = 0
        ) as a
        ,
        (SELECT
        u.*
        FROM
        tb_user_register u,
        tb_sys_organization org
        WHERE
        u.org_id = org.id
        and u.website_user_type =6
        and u.is_del = 0
        ) as b
        where a.level_path.IsDescendantOf(b.level_path)=1 and a.id != b.id
        )
        <if test="sqlMap.params.ibIds != null">
            and A.level_path.IsDescendantOf ((SELECT level_path from tb_user_register where id = #{sqlMap.params.ibIds, jdbcType=INTEGER})) = 1
        </if>
        ) as A
        where ((m.user_id = A.id AND m.ib_id = A.id)
        OR (
        m.user_id != A.id
        AND m.ib_id = A.id
        ))
        and
         m.close_time between #{sqlMap.params.startDate,jdbcType=TIMESTAMP} and #{sqlMap.params.endDate,jdbcType=TIMESTAMP}
        <if test="sqlMap.params.login != null">
            and m.mt4Account like #{sqlMap.params.login, jdbcType=INTEGER}
        </if>
        <if test="sqlMap.params.uidList != null">
            and m.user_id in
            <foreach item="uid" index="index" collection="sqlMap.params.uidList" open="(" separator="," close=")">
                #{uid.id}
            </foreach>
        </if>
        <if test="sqlMap.params.dataSourceId != null">
            and m.dataSourceId = #{sqlMap.params.dataSourceId, jdbcType=INTEGER}
        </if>
        <if test="sqlMap.params.tradingGroupId != null">
            and m.tradeCateId = #{sqlMap.params.tradingGroupId, jdbcType=INTEGER}
        </if>
        <if test="sqlMap.params.loginList != null">
            and m.mt4Account in
            <foreach item="mt4Account" index="index" collection="sqlMap.params.loginList" open="(" separator="," close=")">
                #{mt4Account}
            </foreach>
        </if>
        <if test="sqlMap.params.loginList == null">
            and m.mt4Account in ('')
        </if>
        order by m.close_time
    </select>
  
  <select id="queryCountByConditionByAccount" resultType="java.lang.Integer" parameterType="java.util.Map" >
    select
    count(1)
    from tb_IB_commission_base
    where  ib_id = #{ibId,jdbcType=VARCHAR} and close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
    <if test="mt4Account != null">
        and mt4Account = #{mt4Account, jdbcType=INTEGER}
    </if>
    <if test="agentAccount != null">
        and agentAccount = #{agentAccount, jdbcType=INTEGER}
    </if>
    <if test="dataSourceId != null">
        and dataSourceId = #{dataSourceId, jdbcType=INTEGER}
    </if>
    <if test="tradeCateId != null">
        and tradeCateId = #{tradeCateId, jdbcType=INTEGER}
    </if>
  </select>
  
  <select id="queryByConditionByAccount" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select top ${limit}  
    <include refid="Base_Column_List" />
    from tb_IB_commission_base
    where  ib_id = #{ibId,jdbcType=VARCHAR} and close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
    <if test="mt4Account != null">
        and mt4Account = #{mt4Account, jdbcType=INTEGER}
    </if>
    <if test="agentAccount != null">
        and agentAccount = #{agentAccount, jdbcType=INTEGER}
    </if>
    <if test="dataSourceId != null">
        and dataSourceId = #{dataSourceId, jdbcType=INTEGER}
    </if>
    <if test="tradeCateId != null">
        and tradeCateId = #{tradeCateId, jdbcType=INTEGER}
    </if>
    
    <if test="offset gt 0">
    and ( 
          (SELECT MIN(createDate) FROM (SELECT TOP ${offset} createDate FROM tb_IB_commission_base where  ib_id = #{ibId,jdbcType=VARCHAR} and close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
    <if test="mt4Account != null">
        and mt4Account = #{mt4Account, jdbcType=INTEGER}
    </if>
    <if test="agentAccount != null">
        and agentAccount = #{agentAccount, jdbcType=INTEGER}
    </if>
    <if test="dataSourceId != null">
        and dataSourceId = #{dataSourceId, jdbcType=INTEGER}
    </if>
    <if test="tradeCateId != null">
        and tradeCateId = #{tradeCateId, jdbcType=INTEGER}
    </if>
           ORDER BY createDate desc) AS T) > createDate
        )
    </if>
    order by createDate desc
  </select>

  <!-- 佣金报表 -->
  <select id="queryCountByConditiontAndGroupByTradeCateId" resultType="java.lang.Integer" parameterType="java.util.Map">
    select count(1) from 
    (select
    tradeCateId
    from tb_IB_commission_base
    <where>  
        close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
        <if test="ib_id != null">
            and ib_id = #{ibId,jdbcType=VARCHAR}
        </if>
    </where>
    group by tradeCateId) as a
  </select>
  <!--  <select id="pageQueryByConditiontAndGroupByTradeCateId" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select top ${limit}  
    min(guid)as guid, min(user_id), min(ib_id) as ib_id, min(ib_id_type)as ib_id_type, min(hand_commission), count(pip_commission) as pip_commission, min(mt4_commission) as mt4_commission, 
    min(mt4_commission_agent) as mt4_commission_agent, min(close_time) as close_time, min(ticket) as ticket, min(comment) as comment, min(volume)as volume, min(source) as source , min(status) as status, min(mt4Account) as mt4Account, 
    min(SYMBOL) as SYMBOL, min(SWAPS) as SWAPS, min(PROFIT) as PROFIT, min(settleDate) as settleDate, min(createDate) as createDate, min(updateDate) as updateDate,min(dataSourceId) as dataSourceIdc,min(mt4DataSourceType) as mt4DataSourceType,min(unitPrice) as unitPrice,min(rate) as rate,min(parRate) as parRate,min(settMode) as settMode,tradeCateId
    from tb_IB_commission_base
    <where>  
        close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
        <if test="ib_id != null">
            and ib_id = #{ib_id,jdbcType=VARCHAR}
        </if>
    </where>-->
    <!-- 
    <if test="offset gt 0">
    and (
          (SELECT MIN(guid) FROM (SELECT TOP ${offset} guid FROM tb_IB_commission_base 
            <where>  
                close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
                <if test="ib_id != null">
                    and ib_id = #{ibId,jdbcType=VARCHAR}
                </if>
            </where>
            group by tradeCateId,ib_id,guid
           ORDER BY guid desc) AS T) > guid
        )
    </if>
     -->
     <!--group by tradeCateId
  </select>-->
  <select id="pageQueryByConditiontAndGroupByTradeCateId" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select top ${limit}  
        MIN (ib_id) ib_id,MIN(ib_id_type) ib_id_type,SUM (pip_commission) pip_commission,SUM (volume) volume,tradeCateId
   FROM tb_IB_commission_base 
    <where>  
        close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
        <if test="ib_id != null">
            and ib_id = #{ib_id,jdbcType=VARCHAR}
        </if>
    </where>
    <if test="offset gt 0">
    and (
          (SELECT MIN(tradeCateId) FROM (SELECT TOP ${offset} tradeCateId   FROM tb_IB_commission_base 
            <where>  
                close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
                <if test="ib_id != null">
                    and ib_id = #{ibId,jdbcType=VARCHAR}
                </if>
            </where>
            group by tradeCateId
           ORDER BY tradeCateId desc) AS T) > tradeCateId
        )
    </if>
    group by tradeCateId
    ORDER BY tradeCateId desc
  </select>
  <select id="queryCountByConditiont" resultType="java.lang.Integer" parameterType="java.util.Map">
    select 
    count(1) 
    from tb_IB_commission_base
    <where>  
        close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
        <if test="ib_id != null">
            and ib_id = #{ibId,jdbcType=VARCHAR}
        </if>
        <if test="tradeCateId != null">
            and tradeCateId = #{tradeCateId,jdbcType=VARCHAR}
        </if>
    </where>
  </select>
  <select id="pageQueryByConditiont" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select top ${limit}  
    <include refid="Base_Column_List" />
    from tb_IB_commission_base
    <where>  
        close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
        <if test="ib_id != null">
            and ib_id = #{ib_id,jdbcType=VARCHAR}
        </if>
        <if test="tradeCateId != null">
            and tradeCateId = #{tradeCateId,jdbcType=VARCHAR}
        </if>
    </where>
    <if test="offset gt 0">
    and (
          (SELECT MIN(guid) FROM (SELECT TOP ${offset} guid FROM tb_IB_commission_base 
            <where>  
                close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
                <if test="ib_id != null">
                    and ib_id = #{ibId,jdbcType=VARCHAR}
                </if>
                <if test="tradeCateId != null">
                    and tradeCateId = #{tradeCateId,jdbcType=VARCHAR}
                </if>
            </where>
           ORDER BY guid desc) AS T) > guid
        )
    </if>
    order by guid desc
  </select>
  <select id="queryCountByGroupByAgentAccount" resultType="java.lang.Integer" parameterType="java.util.Map">
    select count(1) from 
    (
    select 
    agentAccount
    from tb_IB_commission_base
    <where>  
        close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
    </where>
    group by agentAccount) as a
  </select>
<select id="pageQueryGroupByAgentAccount" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select top ${limit}  
    MIN (ib_id) ib_id,MIN(ib_id_type) ib_id_type,SUM (pip_commission) pip_commission,SUM (volume) volume,agentAccount
    from tb_IB_commission_base
    <where>  
        close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
    </where>
    <if test="offset gt 0">
    and (
          (SELECT MIN(agentAccount) FROM (SELECT TOP ${offset} agentAccount FROM tb_IB_commission_base 
            <where>  
                close_time between #{start,jdbcType=TIMESTAMP} and #{end,jdbcType=TIMESTAMP}
            </where>
            group by agentAccount
           ORDER BY agentAccount desc) AS T) > agentAccount
        )
    </if>
    group by agentAccount
    order by agentAccount desc
  </select>
    <select id="getCommissionBaseByIBIdAndAgentAccount" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT
            ib_id,
            agentAccount,
            parRate,
            SUM (volume) volume,
            SUM (pip_commission) pip_commission
        FROM tb_IB_commission_base
        WHERE 1=1
            <if test="flagStatus == 1">
               AND mt4Account = #{mt4Account, jdbcType=INTEGER}
               AND agentAccount = #{agentAccount, jdbcType=INTEGER}
            </if>
            <if test="flagStatus == 3">
                AND agentAccount = #{agentAccount, jdbcType=INTEGER}
            </if>
            AND dataSourceId = #{dataSourceId, jdbcType=INTEGER}
            AND close_time BETWEEN #{start,jdbcType=TIMESTAMP} AND #{end,jdbcType=TIMESTAMP}
        GROUP BY
            ib_id,
            agentAccount,
            parRate
    </select>
    <select id="getCommissionBaseByIBIdAndMT4Account" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT
        ib_id,
        mt4Account,
        parRate,
        SUM (volume) volume,
        SUM (pip_commission) pip_commission
        FROM tb_IB_commission_base
        WHERE
        agentAccount = #{agentAccount, jdbcType=INTEGER}
        AND dataSourceId = #{dataSourceId, jdbcType=INTEGER}
        AND close_time BETWEEN #{start,jdbcType=TIMESTAMP} AND #{end,jdbcType=TIMESTAMP}
        GROUP BY
        ib_id,
        mt4Account,
        parRate
    </select>
    <select id="getCommissionBaseByMT4Account" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT
            tradeCateId,
            SUM (volume) volume,
            SUM (pip_commission / parRate) pip_commission
        FROM
            tb_IB_commission_base
        WHERE
            CLOSE_TIME BETWEEN #{startDate,jdbcType=TIMESTAMP} AND #{endDate,jdbcType=TIMESTAMP}
        AND dataSourceId = #{dataSourceId, jdbcType=INTEGER}
        AND mt4Account = #{login, jdbcType=INTEGER}
        AND agentAccount = #{agentAccount, jdbcType=INTEGER}
        GROUP BY
            tradeCateId,
            agentAccount,
            ib_id
        ORDER BY
            tradeCateId
    </select>
    
    <select id="getCommissionBaseByinnerIbId" resultMap="AgentUserMap" parameterType="com.fx.crm.comm.model.CommissionBase">
	    select
	    ib_id,sum(volume) volume,sum(pip_commission/parRate) pip_commission
	    from tb_IB_commission_base m,(
        SELECT
        A.*
        FROM
        tb_user_register A ,tb_user_register u, tb_sys_organization org
        WHERE A.level_path.IsDescendantOf(u.level_path)=1
        and A.is_del = 0
        and u.org_id = org.id
        and u.website_user_type =6
        and u.is_del = 0
        ${sqlMap.dsf}
        and u.id not in (
        select a.id from
        (SELECT
        u.*
        FROM
        tb_user_register u,
        tb_sys_organization org
        WHERE
        u.org_id = org.id
        and u.website_user_type =6
        and u.is_del = 0
        ${sqlMap.dsf}
        ) as a
        ,
        (SELECT
        u.*
        FROM
        tb_user_register u,
        tb_sys_organization org
        WHERE
        u.org_id = org.id
        and u.website_user_type =6
        and u.is_del = 0
        ${sqlMap.dsf}
        ) as b
        where a.level_path.IsDescendantOf(b.level_path)=1 and a.id != b.id
        )
        <if test="sqlMap.params.ibId != null and sqlMap.params.ibId > 0 and sqlMap.params.flagIbid == null">
            and A.level_path.IsDescendantOf ((SELECT level_path from tb_user_register where id = #{sqlMap.params.ibId, jdbcType=INTEGER})) = 1
        </if>
        ) as A
	    where  close_time between #{sqlMap.params.startDate,jdbcType=TIMESTAMP} and #{sqlMap.params.endDate,jdbcType=TIMESTAMP}
	    and ib_id_type=1 AND m.ib_id = A.id

        <if test="sqlMap.params.ibId != null and sqlMap.params.flagIbid != null">
            and A.superior_id = #{sqlMap.params.ibId, jdbcType=INTEGER}
        </if>
        <if test="sqlMap.name!=null">
            and A.cnName like #{sqlMap.name, jdbcType=VARCHAR}
        </if>
	     group by ib_id order by ib_id
  </select>
  
  <select id="getCommissionBaseByLogin" resultMap="AccountSalesMap" parameterType="com.fx.crm.comm.model.CommissionBase">
      select
      m.mt4Account,m.ib_id,sum(volume) volume,sum(pip_commission/parRate) pip_commission
      from tb_IB_commission_base m,(
      SELECT
      A.*
      FROM
      tb_user_register A ,tb_user_register u, tb_sys_organization org
      WHERE A.level_path.IsDescendantOf(u.level_path)=1
      and A.is_del = 0
      and u.org_id = org.id
      and u.website_user_type =6
      and u.is_del = 0
      ${sqlMap.dsf}
      and u.id not in (
      select a.id from
      (SELECT
      u.*
      FROM
      tb_user_register u,
      tb_sys_organization org
      WHERE
      u.org_id = org.id
      and u.website_user_type =6
      and u.is_del = 0
      ${sqlMap.dsf}
      ) as a
      ,
      (SELECT
      u.*
      FROM
      tb_user_register u,
      tb_sys_organization org
      WHERE
      u.org_id = org.id
      and u.website_user_type =6
      and u.is_del = 0
      ${sqlMap.dsf}
      ) as b
      where a.level_path.IsDescendantOf(b.level_path)=1 and a.id != b.id
      )
      <if test="sqlMap.params.ibIds != null">
          and A.level_path.IsDescendantOf ((SELECT level_path from tb_user_register where id = #{sqlMap.params.ibIds, jdbcType=INTEGER})) = 1
      </if>
      ) as A
      where  ib_id_type=1 AND m.ib_id = A.id
        and m.close_time between #{sqlMap.params.startDate,jdbcType=TIMESTAMP} and #{sqlMap.params.endDate,jdbcType=TIMESTAMP}
        <if test="sqlMap.params.login != null">
            and m.mt4Account = #{sqlMap.params.login, jdbcType=INTEGER}
        </if>
      <if test="sqlMap.params.ibIds != null">
          and m.ib_id = #{sqlMap.params.ibIds, jdbcType=INTEGER}
      </if>
        <if test="sqlMap.params.dataSourceId != null">
            and m.dataSourceId = #{sqlMap.params.dataSourceId, jdbcType=INTEGER}
        </if> group by m.mt4Account,m.ib_id
        order by m.mt4Account
  </select>
  
  <select id="getCommissionBaseInnerByTradingGroup" resultMap="TradingAccountMap" parameterType="map">
    select
    tradeCateId,sum(volume) volume,sum(pip_commission/parRate) pip_commission
    from tb_IB_commission_base
    where close_time between #{startDate,jdbcType=TIMESTAMP} and #{endDate,jdbcType=TIMESTAMP}
    <if test="dataSourceId != null">
        and dataSourceId = #{dataSourceId, jdbcType=INTEGER}
    </if>
    <if test="ibId!=null">and ib_id = #{ibId}</if>
    <if test="tradingGroupId != null">
        and tradeCateId = #{tradingGroupId, jdbcType=INTEGER}
    </if> group by tradeCateId,agentAccount,ib_id
    order by tradeCateId
  </select>
  
  <select id="getCommissionBasedDetailByTradingGroup" resultMap="TradingAccountMap" parameterType="map">
    select
    tradeCateId,sum(volume) volume,sum(pip_commission/parRate) pip_commission
    from tb_IB_commission_base
    where close_time between #{startDate,jdbcType=TIMESTAMP} and #{endDate,jdbcType=TIMESTAMP}
    <if test="login != null">
        and mt4Account = #{login, jdbcType=INTEGER}
    </if>
    <if test="dataSourceId != null">
        and dataSourceId = #{dataSourceId, jdbcType=INTEGER}
    </if>
    <if test="ibIds!=null">
    	and ib_id = #{ibIds}
    </if>
    group by tradeCateId,ib_id
    order by tradeCateId
  </select>
</mapper>